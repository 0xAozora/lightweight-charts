"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6915],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var r=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=r.createContext({}),s=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(a),h=i,f=d["".concat(o,".").concat(h)]||d[h]||u[h]||n;return a?r.createElement(f,c(c({ref:t},p),{},{components:a})):r.createElement(f,c({ref:t},p))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,c=new Array(n);c[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,c[1]=l;for(var s=2;s<n;s++)c[s]=a[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9595:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=a(7462),i=a(3366),n=(a(7294),a(3905)),c=["components"],l={sidebar_position:3},o="Price Scale",s={unversionedId:"price-scale",id:"price-scale",isDocsHomePage:!1,title:"Price Scale",description:"Price Scale is an object that maps prices to coordinates and vice versa.",source:"@site/docs/price-scale.md",sourceDirName:".",slug:"/price-scale",permalink:"/lightweight-charts/price-scale",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Line Series",permalink:"/lightweight-charts/series/line-series"},next:{title:"Time Scale",permalink:"/lightweight-charts/time-scale"}},p=[{value:"Autoscale",id:"autoscale",children:[],level:2},{value:"PriceScale ID",id:"pricescale-id",children:[],level:2},{value:"Percentage scales",id:"percentage-scales",children:[],level:2},{value:"Logarithmic scales",id:"logarithmic-scales",children:[],level:2},{value:"Equality of price scales",id:"equality-of-price-scales",children:[],level:2}],u={toc:p};function d(e){var t=e.components,a=(0,i.Z)(e,c);return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"price-scale"},"Price Scale"),(0,n.kt)("p",null,"Price Scale is an object that maps prices to coordinates and vice versa.\nThe rules of converting depend on price scale mod, visible height of chart and visible part of data."),(0,n.kt)("p",null,"Chart always has two predefined price scales: left and right, and an unlimited number of overlay scales.\nLeft and right price scales could be visible, overlay price scales are always hidden, so the user cannot interact with them directly."),(0,n.kt)("h2",{id:"autoscale"},"Autoscale"),(0,n.kt)("p",null,"Autoscaling is a feature of automatic adjusting price scale to fit the visible range of data.\nAutoscaling is enabled by default, however you could turn it off by zooming price scale or calling ",(0,n.kt)("inlineCode",{parentName:"p"},"PriceScaleApi.setOptions")," method with ",(0,n.kt)("inlineCode",{parentName:"p"},"autoScale")," field set to false.\nOverlay price scales are always autoscaled."),(0,n.kt)("h2",{id:"pricescale-id"},"PriceScale ID"),(0,n.kt)("p",null,"Each price scale has a corresponding ID to refer to it via API. Left and right price scales have predefined IDs ",(0,n.kt)("inlineCode",{parentName:"p"},"left")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"right"),".\nWhile creating a series, you could specify PriceScaleID.\nIf this id refers to an already existing price scale, the new series will share the price scale with the already existing series.\nIf the specified price scale does not exist, it will be implicitly created.\nSo to create two series on the same overlay price scale just specify the same ",(0,n.kt)("inlineCode",{parentName:"p"},"priceScaleId")," for them.\nYou could get the ",(0,n.kt)("inlineCode",{parentName:"p"},"id")," of the scale with ",(0,n.kt)("inlineCode",{parentName:"p"},"PriceScaleApi.id")," method."),(0,n.kt)("h2",{id:"percentage-scales"},"Percentage scales"),(0,n.kt)("p",null,"Percentage mode of price scale allows relative comparison of series.\nAll the serieses attached to the percentage scale are placed to have the first visible data item on the same point.\nPercentage scales are always autoscaled."),(0,n.kt)("h2",{id:"logarithmic-scales"},"Logarithmic scales"),(0,n.kt)("p",null,"The reason for having logarithmic scales is comparing relative change instead of absolute change.\nOn a regular scale every candle with 100-points change has the same height.\nOn a logarithmic scale every candle with 2% change has the same height.\nLogarithmic scale cannot be displayed as a percentage."),(0,n.kt)("h2",{id:"equality-of-price-scales"},"Equality of price scales"),(0,n.kt)("p",null,"Lightweight charts library does not guarantee to return the same instance of ",(0,n.kt)("inlineCode",{parentName:"p"},"PriceScaleApi")," object while returning the same actual price scale.\nSo you should never compare objects of ",(0,n.kt)("inlineCode",{parentName:"p"},"PriceScaleApi"),", compare ",(0,n.kt)("inlineCode",{parentName:"p"},"PriceScaleApi.id()")," values instead."))}d.isMDXComponent=!0}}]);